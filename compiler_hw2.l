/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <string.h>
#define BUF_SIZE 256
extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];
char buf2[BUF_SIZE];
int line = 1 ;
/* This macro is used to record code line */
#define CONCAT {  strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); memset(buf2,0,sizeof buf2); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return ADD; }
"-" 	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return SUB; }
"*" 	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MUL; }
"/" 	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return DIV; }
"%"     { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MOD; }
"++"    { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return INC; }
"--"    { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return DEC; }

 /* Relational */
">"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MT; }
"<"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return LT; }
">="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MTE; }
"<="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return LTE; }
"=="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return EQ; }
"!="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return NE; }

 /* Assignment */
"="		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return ASGN; }
"+="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return ADDASGN; }
"-="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return SUBASGN; }
"*="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MULASGN; }
"/="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return DIVASGN; }
"%="	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return MODASGN; }

 /* Logical */
"&&"	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return AND; }
"||"	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return OR; }
"!"	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return NOT; }

 /* Delimiters */
"("		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return LB; }
")"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return RB; }
"{"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return LCB; }
"}"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return RCB; }
"["		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return LSB; }
"]"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return RSB; }
","		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT  return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return IF; }
"else"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return ELSE; }
"for"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return FOR; }
"while"		{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext); return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return VOID; }
"int"		{ CONCAT yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);  return INT; }
"float"  	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return FLOAT; }
"string"  	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return STRING; }
"bool"  	{ CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return TRUE; }
"false"     { CONCAT   yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);  return FALSE; }
"return"    { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);   return RET; }

 /* String Constant */
\"				        { CONCAT BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT BEGIN INITIAL;  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);  return STR_CONST; }
<STRING_STATE>[^"]*		{ CONCAT }

 /* Number Constant */
{integer}	{ CONCAT yylval.i_val=atoi(yytext);  return I_CONST; }
{float}	    { CONCAT  yylval.f_val=atof(yytext);  return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT }
<COMMENT>\n	   { 	CONCAT
			int c =0;
            if(buf[c]=='\n')
                printf("%d:\n",line);
			else{
                printf("%d: ",line);
			    while(buf[c] !='\0'){
				    printf("%c",buf[c]);
				    c++;
			    }
            }
			memset(buf,0,sizeof buf);
			line++;  }
<COMMENT>"*"		{ CONCAT }
<COMMENT>"*/"		{ CONCAT  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       { CONCAT  yylval.string=malloc(sizeof(char)*16); 
                    strcpy(yylval.string, yytext);  return ID; }

 /* others */

[;]         { CONCAT return SEMICOLON; }
[\n]        {
        int c =0;
        strcpy(buf2,buf);
		strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1);
        if(buf[c]=='\n')
            printf("%d:\n",line);
	    else{
            printf("%d: ",line);
		    while(buf[c] !='\0'){
			    printf("%c",buf[c]);
				c++;
			}
        }
		line++;  
		memset(buf,0,sizeof buf);
		return NEWLINE; }
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ CONCAT } /* Ignore other charactor sets */
<<EOF>>     { CONCAT return 0; }

%%

int yywrap()
{
    return 1;
}
